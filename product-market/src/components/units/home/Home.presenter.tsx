import Head from "next/head";
import InfiniteScroll from "react-infinite-scroller";
import { IQuery } from "src/commons/types/graphql/types";
import { ItemCard } from "src/commons/ui/item-card";
import ItemList from "src/commons/ui/item-list";
import * as S from "./Home.styles";

interface IProps {
  itemsOfBestDatas?: Pick<IQuery, "fetchUseditemsOfTheBest">;
  pageStart: number;
  onLoadMore?: (page: number) => void;
  hasMore?: boolean;
  usedItemsData?: Pick<IQuery, "fetchUseditems">;
}

export default function HomeUI(props: IProps) {
  return (
    <>
      <Head>
        <title>상품 마켓</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <S.Wrapper>
        <S.CarouselWrapper autoplay>
          <div>
            <S.CarouselContent src="/images/banner-1.jpg" />
          </div>
          <div>
            <S.CarouselContent src="/images/banner-2.jpg" />
          </div>
          <div>
            <S.CarouselContent src="/images/banner-3.jpg" />
          </div>
        </S.CarouselWrapper>
        <S.BestItemsWrapper>
          <S.BestItemTitle>베스트 상품</S.BestItemTitle>
          <S.ItemsWrapper>
            {props.itemsOfBestDatas?.fetchUseditemsOfTheBest &&
              props.itemsOfBestDatas?.fetchUseditemsOfTheBest.map((el) => (
                <ItemCard
                  key={el._id}
                  title={el.name}
                  remarks={el.remarks}
                  price={el.price ?? 0}
                  pickCount={el.pickedCount ?? 0}
                />
              ))}
          </S.ItemsWrapper>
        </S.BestItemsWrapper>
        <S.ProductWrapper>
          <InfiniteScroll
            pageStart={props.pageStart}
            loadMore={props.onLoadMore}
            hasMore={props.hasMore}
            useWindow={true}
          >
            {props.usedItemsData ? (
              props.usedItemsData?.fetchUseditems.map((el, index) => (
                <ItemList
                  id={el._id}
                  key={`${el._id}` + `${index}`}
                  data={el}
                />
              ))
            ) : (
              <></>
            )}
          </InfiniteScroll>
        </S.ProductWrapper>
      </S.Wrapper>
    </>
  );
}
